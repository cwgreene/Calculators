
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x9aZB\xd6.\x18\xda\xe3o.\x9dV4\xef\x99#'
    
_lr_action_items = {'AND':([1,4,6,8,12,14,15,20,27,30,32,],[-3,-1,-7,-2,19,-4,-5,-8,-12,-9,-6,]),'IMPLIES':([1,4,6,8,12,14,15,20,27,30,32,],[-3,-1,-7,-2,22,-4,-5,-8,-12,-9,-6,]),'EXISTS':([0,2,16,17,18,19,21,22,23,24,31,],[3,3,3,3,-10,-16,3,-18,-15,-17,-11,]),'SYMBOL':([0,2,3,7,9,10,13,16,17,18,19,21,22,23,24,28,31,],[5,5,-14,-13,5,18,18,5,5,-10,-16,5,-18,-15,-17,18,-11,]),'FORALL':([0,2,16,17,18,19,21,22,23,24,31,],[7,7,7,7,-10,-16,7,-18,-15,-17,-11,]),'COMMA':([18,],[28,]),'LPAREN':([0,2,5,9,16,17,18,19,21,22,23,24,31,],[2,2,13,16,2,2,-10,-16,2,-18,-15,-17,-11,]),'NOT':([0,2,16,17,18,19,21,22,23,24,31,],[9,9,9,9,-10,-16,9,-18,-15,-17,-11,]),'RPAREN':([1,4,6,8,12,14,15,18,20,25,26,27,29,30,31,32,],[-3,-1,-7,-2,20,-4,-5,-10,-8,30,20,-12,32,-9,-11,-6,]),'EQUIV':([1,4,6,8,12,14,15,20,27,30,32,],[-3,-1,-7,-2,24,-4,-5,-8,-12,-9,-6,]),'OR':([1,4,6,8,12,14,15,20,27,30,32,],[-3,-1,-7,-2,23,-4,-5,-8,-12,-9,-6,]),'$end':([1,4,6,8,11,14,15,20,27,30,32,],[-3,-1,-7,-2,0,-4,-5,-8,-12,-9,-6,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'predicate':([0,2,9,16,17,21,],[1,1,14,1,1,1,]),'symbol_list':([10,13,28,],[17,25,31,]),'sentence':([0,2,16,17,21,],[4,4,4,4,4,]),'pexpression':([0,2,9,16,17,21,],[6,6,15,6,6,6,]),'binary_operator':([12,],[21,]),'quantified_expression':([0,2,16,17,21,],[8,8,8,8,8,]),'quantifier':([0,2,16,17,21,],[10,10,10,10,10,]),'expression':([0,2,16,17,21,],[11,12,26,27,29,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> sentence','expression',1,'p_expression','firstorder_yacc.py',21),
  ('expression -> quantified_expression','expression',1,'p_expression','firstorder_yacc.py',22),
  ('sentence -> predicate','sentence',1,'p_sentence','firstorder_yacc.py',29),
  ('sentence -> NOT predicate','sentence',2,'p_sentence','firstorder_yacc.py',30),
  ('sentence -> NOT pexpression','sentence',2,'p_sentence','firstorder_yacc.py',31),
  ('sentence -> LPAREN expression binary_operator expression RPAREN','sentence',5,'p_sentence','firstorder_yacc.py',32),
  ('sentence -> pexpression','sentence',1,'p_sentence','firstorder_yacc.py',33),
  ('pexpression -> LPAREN expression RPAREN','pexpression',3,'p_pexpression','firstorder_yacc.py',44),
  ('predicate -> SYMBOL LPAREN symbol_list RPAREN','predicate',4,'p_predicate','firstorder_yacc.py',50),
  ('symbol_list -> SYMBOL','symbol_list',1,'p_symbol_list','firstorder_yacc.py',56),
  ('symbol_list -> SYMBOL COMMA symbol_list','symbol_list',3,'p_symbol_list','firstorder_yacc.py',57),
  ('quantified_expression -> quantifier symbol_list expression','quantified_expression',3,'p_quantified_expression','firstorder_yacc.py',66),
  ('quantifier -> FORALL','quantifier',1,'p_quantifier','firstorder_yacc.py',72),
  ('quantifier -> EXISTS','quantifier',1,'p_quantifier','firstorder_yacc.py',73),
  ('binary_operator -> OR','binary_operator',1,'p_binary_operator','firstorder_yacc.py',79),
  ('binary_operator -> AND','binary_operator',1,'p_binary_operator','firstorder_yacc.py',80),
  ('binary_operator -> EQUIV','binary_operator',1,'p_binary_operator','firstorder_yacc.py',81),
  ('binary_operator -> IMPLIES','binary_operator',1,'p_binary_operator','firstorder_yacc.py',82),
]
